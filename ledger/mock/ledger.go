// Code generated by mockery v2.12.1. DO NOT EDIT.

package mock

import (
	ledger "github.com/onflow/flow-go/ledger"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Ledger is an autogenerated mock type for the Ledger type
type Ledger struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *Ledger) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

func (_m *Ledger) PathFinderVersion() uint8 {
	ret := _m.Called()

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uint8)
		}
	}

	return r0
}

// GetSingleValue provides a mock function with given fields: query
func (_m *Ledger) GetSingleValue(query *ledger.TrieReadSingleValue) (ledger.Value, error) {
	ret := _m.Called(query)

	var r0 ledger.Value
	if rf, ok := ret.Get(0).(func(*ledger.TrieReadSingleValue) ledger.Value); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ledger.TrieReadSingleValue) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: query
func (_m *Ledger) Get(query *ledger.TrieRead) ([]ledger.Value, error) {
	ret := _m.Called(query)

	var r0 []ledger.Value
	if rf, ok := ret.Get(0).(func(*ledger.TrieRead) []ledger.Value); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ledger.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ledger.TrieRead) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitialState provides a mock function with given fields:
func (_m *Ledger) InitialState() ledger.State {
	ret := _m.Called()

	var r0 ledger.State
	if rf, ok := ret.Get(0).(func() ledger.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.State)
		}
	}

	return r0
}

// Prove provides a mock function with given fields: query
func (_m *Ledger) Prove(query *ledger.TrieRead) (ledger.Proof, error) {
	ret := _m.Called(query)

	var r0 ledger.Proof
	if rf, ok := ret.Get(0).(func(*ledger.TrieRead) ledger.Proof); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.Proof)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ledger.TrieRead) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ready provides a mock function with given fields:
func (_m *Ledger) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Set provides a mock function with given fields: update
func (_m *Ledger) Set(update *ledger.TrieUpdate) (ledger.State, error) {
	ret := _m.Called(update)

	var r0 ledger.State
	if rf, ok := ret.Get(0).(func(*ledger.TrieUpdate) ledger.State); ok {
		r0 = rf(update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ledger.TrieUpdate) error); ok {
		r1 = rf(update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1 
}

// NewLedger creates a new instance of Ledger. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewLedger(t testing.TB) *Ledger {
	mock := &Ledger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
